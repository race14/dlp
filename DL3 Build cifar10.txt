# Importing required packages
import tensorflow as tf
from keras.datasets import cifar10
from keras.models import Sequential
from keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D
import matplotlib.pyplot as plt
import numpy as np

# a. Loading and preprocessing image data
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
input_shape = (32, 32, 3)  # Adjusted for CIFAR-10 with 3 color channels

# Making sure that values are float so that we can get decimal points after division
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

# Normalizing the RGB codes by dividing them by the max RGB values
x_train /= 255
x_test /= 255

print("Shape of training:", x_train.shape)
print("Shape of testing:", x_test.shape)

# b. Defining the model architecture
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3), input_shape=input_shape))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(200, activation="relu"))
model.add(Dropout(0.3))
model.add(Dense(10, activation="softmax"))

model.summary()

# c. Training the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=10)  # Adjusted the number of epochs

# d. Estimating the model's performance
test_loss, test_acc = model.evaluate(x_test, y_test)
print("Test Loss: {:.3f}".format(test_loss))
print("Test Accuracy: {:.3f}".format(test_acc))

# Showing an image from the dataset
image = x_train[0]
plt.imshow(image)
plt.show()

# Predicting the class of the image
image = np.expand_dims(image, axis=0)
predicted_class = model.predict(image)
predicted_class = np.argmax(predicted_class)
print("Predicted Class: {}".format(predicted_class))
